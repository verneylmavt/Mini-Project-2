class Stack:
    def __init__(self):
        self.__items = []
    def push(self, item):
        self.__items.append(item)
    def pop(self):
        if len(self.__items) == 0:
            return None
        return self.__items.pop()
    def peek(self):
        if len(self.__items) == 0:
            return None
        return self.__items[-1]
    @property
    def items(self):
        return self.__items
    @property
    def size(self):
        return len(self.__items)
    @property
    def is_empty(self):
        if len(self.__items) == 0:
            return True
        return False



class EvaluateExpression:
  valid_char = '0123456789+-*/() '
  valid_opr = '+-*/()'
  
  def __init__(self, string=""):
    self._expression = ''
    for i in string:
      if i in self.valid_char:
        self._expression = string
      else:
        self._expression = ''
        break

  @property
  def expression(self):
    return self._expression

  @expression.setter
  def expression(self, new_expr):
    self.__init__(new_expr)

  def insert_space(self):
    str_expression = self.expression
    opr_ls = []
    # If element in the expression is an operator '+-*/()', put it into list
    # If element appears more than one, not put into list
    for i in str_expression:
      if (i in self.valid_opr) and (i not in opr_ls):
        opr_ls += [i]
      else:
        pass
    # Iterate over all elements in operator list
    for j in opr_ls:
      old_value = j
      new_value = " " + j + " "
      # Because the method used is replace, similar operator is not needed to be put in list
      str_expression = str_expression.replace(old_value, new_value)
    return str_expression

  def process_operator(self, operand_stack, operator_stack):
    second_value = int(operand_stack.pop())
    first_value = int(operand_stack.pop())
    operator_value = operator_stack.pop()
    # Check the operator value
    if operator_value == "+":
      result = first_value + second_value
    elif operator_value == '-':
      result = first_value - second_value
    elif operator_value == '*':
      result = first_value * second_value
    elif operator_value == '/':
      if second_value:
        result = first_value // second_value
      # If second_value == 0, raise "Division by Zero is undefined"
      else:
        raise Exception('Division by Zero is undefined')
    operand_stack.push(result)
    return result
