def merge(array, arrayf, l, m, r):
	left_array = array[l:m]
	left_arrayf = arrayf[l:m]
	right_array = array[m:r+1]
	right_arrayf = arrayf[m:r+1]
	left_len = len(left_arrayf)
	right_len = len(right_arrayf)
	left_pointer = 0
	right_pointer = 0
	dest = l
	# Since the sort is based on new applied function, the comparison is also based on new applied function list
	while (left_pointer < left_len) and (right_pointer < right_len):
		if left_arrayf[left_pointer] <= right_arrayf[right_pointer]:
			# However, since the objective is to change the real list, the comparison made by new applied function list will change the real list
			array[dest] = left_array[left_pointer]
			# The new applied function list also need to be changed to keep track of the comparison
			arrayf[dest] = left_arrayf[left_pointer]
			left_pointer += 1
		else:
			array[dest] = right_array[right_pointer]
			arrayf[dest] = right_arrayf[right_pointer]
			right_pointer += 1
		dest += 1
	while (left_pointer < left_len):
		array[dest] = left_array[left_pointer]
		arrayf[dest] = left_arrayf[left_pointer]
		left_pointer += 1
		dest += 1
	while (right_pointer < right_len):
		array[dest] = right_array[right_pointer]
		arrayf[dest] = right_arrayf[right_pointer]
		right_pointer += 1
		dest += 1

def mergesort_recursive(array, arrayf, l, r):
	if r-l > 0:
		m = (l+r)//2 
		mergesort_recursive(array, arrayf, l, m)
		mergesort_recursive(array, arrayf, m+1, r)
		merge(array, arrayf, l, m+1, r)

def mergesort(array, byfunc=None):
    # If function argument is not empty, new applied function list is created as a base to compare
	if byfunc:
		arrayf = [byfunc(i) for i in array]
	# If function argument is empty, new applied function list is the real list itself
	else:
		arrayf = array
	l = 0
	r = len(arrayf)-1
	mergesort_recursive(array, arrayf, l, r)
